module Plasmacore

$include "Macros.rogue"

uses Bitmap/CustomIO    # must come before 'uses Bitmap'
uses Bitmap [export]
uses Geometry [export]
uses Math/Matrix [export]
uses UI [export]  # for Events

$include "Plasmacore/Asset.rogue"
$include "Plasmacore/BitmapIO.rogue"
$include "Plasmacore/Box.rogue"
$include "Plasmacore/Canvas.rogue"
$include "Plasmacore/Display.rogue"
$include "Plasmacore/Image.rogue"
$include "Plasmacore/iOS.rogue"
$include "Plasmacore/Line.rogue"
$include "Plasmacore/macOS.rogue"
$include "Plasmacore/Messaging.rogue"
$include "Plasmacore/ObjectTransform.rogue"
$include "Plasmacore/ProjectionTransform.rogue"
$include "Plasmacore/RenderCmd.rogue"
$include "Plasmacore/RenderMode.rogue"
$include "Plasmacore/RenderQueue.rogue"
$include "Plasmacore/Texture.rogue"
$include "Plasmacore/TextureImage.rogue"
$include "Plasmacore/Triangle.rogue"
$include "Plasmacore/ViewTransform.rogue"

class Plasmacore [essential singleton]
  PROPERTIES
    configure_handler     : Function
    draw_handler          : Function
    key_event_handler     : Function(KeyEvent)
    pointer_event_handler : Function(PointerEvent)
    scroll_event_handler  : Function(ScrollEvent)
    text_event_handler    : Function(TextEvent)
    update_handler        : Function

    last_update_time   : Real64
    has_focused_scroll : Logical

    displays = Table<<Int32,Display>>()


  METHODS
    method init
      MessageListener["Application.on_launch"] =
        function( m:Message )
          Plasmacore.configure
        endFunction

      MessageManager.set_listener( "Display.on_focus_gained",
        (m) => Keyboard.clear_pressed_keys )

      MessageListener["Display.on_pointer_event"] =
        function( m:Message )
          m.read_int32x   # display ID
          local type  = m.read_int32x
          local x     = m.read_int32x
          local y     = m.read_int32x
          local index = m.read_int32x
          local e = PointerEvent( type, XY(x,y), XY.zero, index )
          if (Plasmacore.pointer_event_handler) Plasmacore.pointer_event_handler( e )
        endFunction

      MessageListener["Display.on_key_event"] =
        function( m:Message )
          m.read_int32x   # display ID
          local is_press  = m.read_logical
          local keycode   = m.read_int32x
          local syscode   = m.read_int32x
          local is_repeat = m.read_logical
          if (not is_repeat) Keyboard.key_pressed[ keycode & 255 ] = is_press
          local e = KeyEvent( keycode, syscode, is_press, is_repeat, Keyboard.modifier_key_state )
          if (Plasmacore.key_event_handler) Plasmacore.key_event_handler( e )
        endFunction

      MessageManager.set_listener( "Display.on_scroll_event",
        function(m:Message)
          m.read_int32x   # display ID
          local x = m.read_real64
          local y = m.read_real64
          local delta = XY( x, y )
          local is_precise  = m.read_logical
          local in_progress = m.read_logical
          local is_momentum = m.read_logical

          Plasmacore.has_focused_scroll = in_progress and not is_momentum

          local e = ScrollEvent( delta, &=is_precise, &=in_progress, &=is_momentum, &density=Display.density )
          if (Plasmacore.scroll_event_handler) Plasmacore.scroll_event_handler( e )
        endFunction )

      MessageManager.set_listener( "Display.on_text_event",
        function(m:Message)
          m.read_int32x   # display ID
          local ch   = m.read_int32x->Character
          local text = m.read_string
          local e = TextEvent( ch, text )
          if (Plasmacore.text_event_handler) Plasmacore.text_event_handler(e)
        endFunction )

      MessageListener["Display.render"] =
        function( m:Message )
          local display_id     = m.read_int32x
          local display_width  = m.read_int32x
          local display_height = m.read_int32x
          local display = Plasmacore.display( display_id )
          local reply = m.reply( &reuse=display.render_reply )
          display.render_reply = reply
          display.render( display_width, display_height )
          reply.write_int32x( RenderCmd.END_RENDER )
          reply.send
        endFunction

    method configure
      if (configure_handler) configure_handler()

    method display( id:Int32 )->Display
      local result = displays[ id ]
      if (result) return result
      result = Display( id )
      displays[id] = result
      return result

    method draw
      if (draw_handler) draw_handler()

    method find_asset_filepath( name:String )->String
      local reply = Message( "Data.find_asset" ).[ write_string(name) ].send
      if (not reply) return null
      if (not reply.read_logical) return null
      return reply.read_string

    method set_on_configure( configure_handler )

    method set_on_draw( draw_handler )

    method set_on_key_event( @key_event_handler )

    method set_on_pointer_event( @pointer_event_handler )

    method set_on_scroll_event( @scroll_event_handler )

    method set_on_text_event( @text_event_handler )

    method set_on_update( update_handler )

    method update
      if (update_handler) update_handler()

    method update_and_draw
      local cur_time = System.time
      local update_count = ((cur_time - last_update_time) * 60 + 0.1)->Int32
      last_update_time = cur_time

      if (update_count < 1 or update_count > 30) update_count = 1
      loop (update_count) update
      draw
endClass

