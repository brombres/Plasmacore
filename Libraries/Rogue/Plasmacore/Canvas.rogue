module Plasmacore

class Canvas [singleton]
  GLOBAL PROPERTIES
    next_canvas_id = 1

  PROPERTIES
    id              : Int32

    width           : Int32
    height          : Int32

    color           = Color.WHITE : Color  # current drawing color

    render_queue    = RenderQueue()
    original_canvas : Canvas

  METHODS
    method init
      id = 0  # Display canvas / main buffer

    method init( width, height )
      id = next_canvas_id
      ++next_canvas_id

    method aspect_ratio->Real64
      return width->Real64 / height

    method at( u:Real64, v:Real64 )->XY
      return bounds.at( u, v )

    method at( uv:XY )->XY
      return bounds.at( uv )

    method bounds->Box
      return Box( width, height )

    method center->XY [macro]
      return size/2

    method clear( color=Color.BLACK:Color )
      render_queue.clear_color = color

    method on_use->Logical
      original_canvas = Canvas
      Canvas = this

      render_queue.clear

      ProjectionTransform.push_2dx()

      return true  # dummy return value

    method on_end_use
      render_queue.commit
      Display.render_reply.write_int32x( RenderCmd.BEGIN_CANVAS )
      Display.render_reply.write_int32x( id )
      Display.render_reply.write_bytes( render_queue->Byte[] )
      Canvas = original_canvas

    method size->XY
      return XY(width,height)
endClass

