module Plasmacore

class PVKSwapchain
  PROPERTIES
    context       : VKContext
    current_frame : PVKFrameControl
    frames        = PVKFrameControl[]

    native "VkSwapchainKHR swapchain_value;"

  METHODS
    method init( context )

    method advance_frame [api]
      current_frame = frames[ (frames.locate(current_frame).value + 1) % frames.count ]

    method configure [api]
trace "----"
      if (context.surface.max_size.min == 0)
        context.is_prepared = false
        context.is_minimized = true
        return
      else
        context.is_minimized = false
      endIf

      local size = Display.size
trace context.surface.size
      if (context.surface.size.x != -1) size = context.surface.size
      size .= clamped( context.surface.min_size, context.surface.max_size )
      Display.size = size
trace size

      local pre_transform = VKSurfaceTransform.IDENTITY
      if (not context.surface.supports_transform(pre_transform))
        pre_transform = context.surface.current_transform
      endIf

      local composite_alpha_type : VKCompositeAlphaType
      forEach (type in VKCompositeAlphaType.categories)
        if (context.surface.supports_composite_alpha_type(type))
          composite_alpha_type = type
          escapeForEach
        endIf
      endForEach

      local present_mode = VKPresentMode.FIFO

      local buffer_count = 3.clamped( context.surface.min_buffer_count, context.surface.max_buffer_count )

      native
        @|VkSwapchainKHR old_swapchain = $this->swapchain_value;
         |
         |VkSwapchainCreateInfoKHR swapchain_ci =
         |{
         |  .sType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR,
         |  .pNext = NULL,
         |  .surface = $context->surface->native_surface.value,
         |  .minImageCount = $buffer_count,
         |  .imageFormat = $context->surface_format.native_format.value.format,
         |  .imageColorSpace = $context->surface_format.native_format.value.colorSpace,
         |  .imageExtent =
         |  {
         |    .width  = $size.x,
         |    .height = $size.y
         |  },
         |  .imageUsage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT,
         |  .preTransform = $pre_transform.value,
         |  .compositeAlpha = $composite_alpha_type.value,
         |  .imageArrayLayers = 1,
         |  .imageSharingMode = VK_SHARING_MODE_EXCLUSIVE,
         |  .queueFamilyIndexCount = 0,
         |  .pQueueFamilyIndices = NULL,
         |  .presentMode = $present_mode.value,
         |  .oldSwapchain = old_swapchain,
         |  .clipped = 1,
         |};
         |
         |$context->vkCreateSwapchainKHR.value( $context->device->native_device.value, &swapchain_ci, NULL, &$this->swapchain_value );
         |
         |if (old_swapchain != VK_NULL_HANDLE)
         |{
         |  $context->vkDestroySwapchainKHR.value( $context->device->native_device.value, old_swapchain, NULL );
         |}

    method create_semaphores [api]
      forEach (i in 0..<2)
        frames.add( PVKFrameControl(i,context) )
      endForEach
      current_frame = frames.first

endClass

class PVKFrameControl
  PROPERTIES
    index   : Int32
    context : VKContext

    native "VkFence fence;"
    native "VkSemaphore image_acquired_semaphore;"
    native "VkSemaphore draw_complete_semaphore;"
    native "VkSemaphore image_ownership_semaphore;"

  METHODS
    method init( index, context )
      native
        @|VkFenceCreateInfo fence_config =
         |{
         |  .sType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO,
         |  .pNext = NULL,
         |  .flags = VK_FENCE_CREATE_SIGNALED_BIT
         |};
         |
         |VkSemaphoreCreateInfo sephamore_config =
         |{
         |  .sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO,
         |  .pNext = NULL,
         |  .flags = 0
         |};
         |
         |VkDevice device = $context->device->native_device.value;
         |
         |vkCreateFence( device, &fence_config, NULL, &$this->fence );
         |
         |vkCreateSemaphore( device, &sephamore_config, NULL, &$this->image_acquired_semaphore );
         |vkCreateSemaphore( device, &sephamore_config, NULL, &$this->draw_complete_semaphore );
         |if ($context->uses_separate_presentation_queue)
         |{
         |  vkCreateSemaphore( device, &sephamore_config, NULL, &$this->image_ownership_semaphore );
         |}

    method block_until_ready
      local device = context.device
      native
        @|vkWaitForFences( $device->native_device.value, 1, &$this->fence, VK_TRUE, UINT64_MAX );
         |vkResetFences( $device->native_device.value, 1, &$this->fence );
endClass
