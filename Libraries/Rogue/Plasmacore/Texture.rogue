module Plasmacore

class Texture
  PROPERTIES
    id           : Int32
    asset        : ImageAsset
    is_ready     = false
    texture_size : XY

  METHODS
    method init( asset )
      id = TextureManager.next_id
      ++TextureManager.next_id
      TextureManager.pending_textures.add( this )

    method on_cleanup
      Message( "Texture.unload" ).[ write_int32x(id) ].send

    method on_load( m:Message )
      if (m.read_logical)
        local w = m.read_int32x
        local h = m.read_int32x
        texture_size = XY(w,h)
        is_ready = true
      else
        println "Error loading $"(asset.filepath)
      endIf
endClass

class TextureManager [singleton]
  PROPERTIES
    next_id          = 1
    pending_textures = Texture[]
    loading_textures = Table<<Int32,Texture>>()

  METHODS
    method init
      MessageListener["Texture.on_load"] =
        function( m:Message )
          TextureManager.on_load( m )
        endFunction

    method load_pending
      if (pending_textures.count)
        forEach (texture in pending_textures)
          if (texture.asset.confirm_exists)
            local q = Canvas.render_queue
            q.write( RenderCmd.LOAD_TEXTURE )
            q.write_int32x( texture.id )
            q.write_string( texture.asset.filepath )
            loading_textures[ texture.id ] = texture
          endIf
        endForEach
        pending_textures.clear
      endIf

    method on_load( m:Message )
      local id = m.read_int32x
      local texture = loading_textures.remove( id )
      if (texture) texture.on_load( m )
endClass

