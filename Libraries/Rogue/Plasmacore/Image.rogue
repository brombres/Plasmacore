module Plasmacore

class Image
  PROPERTIES
    size          : XY
    original_size : XY
    attributes    : Int32
    texture       : Texture
    uv            : Quad?

  METHODS
    method init( asset:Asset )
      init( Texture(asset) )

    method init( bitmap:Bitmap )
      init( Texture(bitmap) )

    method init( name:String )
      init( Asset(name) )

    method init( texture, uv=null )

    method draw( position:XY, style:Style )
      if (not is_loaded)
        println "[Plasmacore] Image has not finished loading - check .is_loaded before drawing."
      endIf
      if (not @uv)
        println "[Plasmacore] Image uv coordinates are undefined."
      endIf

      localize size
      local has_transform = style.transform or style.rotate.value

      if (style.transform)
        local m = Matrix.translate( position )
        m *= style.transform.value
        m *= Matrix.transform( XYZ(size,1), style.anchor )
        ObjectTransform.push( m )
      elseIf (style.rotate.value)
        ObjectTransform.push( Matrix.transform(XYZ(position,0), size, style.anchor, style.rotate.value) )
      else
        position -= size * style.anchor.position
      endIf

      localize uv
      local uva = uv.a
      local uvb = uv.b
      local uvc = uv.c
      local uvd = uv.d

      if (style.hflip)
        swapValues( uva, uvb )
        swapValues( uvc, uvd )
      endIf
      if (style.vflip)
        swapValues( uva, uvc )
        swapValues( uvb, uvd )
      endIf

      local render_mode = style.render_mode
      if (render_mode is null)
        if (style.has_color or style.has_colors)
          render_mode = RenderMode.ALPHA_TEXTURE_MULTIPLY
        else
          render_mode = RenderMode.ALPHA_TEXTURE
        endIf
      endIf

      use mode = render_mode
        mode.texture = @texture
        if (has_transform)
          # Position & size are incorporated in ObjectTransform
          mode.add_positions( XY(0,0), XY(1,1), XY(1,0) )
          mode.add_positions( XY(0,0), XY(0,1), XY(1,1) )
        else
          mode.add_positions( position, position+size, position+size.xv )
          mode.add_positions( position, position+size.yv, position+size )
        endIf
        mode.add_uvs( uva, uvc, uvb )
        mode.add_uvs( uva, uvd, uvc )
        if (style.has_colors)
          local colors = style.colors
          mode.colors.add( colors.a )
          mode.colors.add( colors.c )
          mode.colors.add( colors.b )
          mode.colors.add( colors.a )
          mode.colors.add( colors.d )
          mode.colors.add( colors.c )
        elseIf (style.has_color)
          local color = style.color
          loop (6) mode.colors.add( color )
        endIf
      endUse

      if (has_transform)
        ObjectTransform.pop
      endIf

    method is_loaded->Logical
      if (not @texture.is_loaded) return false

      if (original_size == XY.zero)
        original_size = @texture.image_size
        size = original_size
      endIf

      if (not @uv) @uv = Box(@texture.uv_max)->Quad
      return true

    method scale->XY
      return size / original_size

    method scale_to_fill( size:XY )
      scale = (size / original_size).max

    method scale_to_fit( size:XY )
      scale = (size / original_size).min

    method set_scale( scale:XY )
      size = scale * original_size

    method set_scale( s:Real64 )
      size = s * original_size

    method set_uv( @uv )

    method texture->Texture
      return @texture

    method uv->Quad
      return @uv.value
endClass

