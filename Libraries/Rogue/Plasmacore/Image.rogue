module Plasmacore

class Image( texture:Texture, size=null:XY?, uv=null:Quad? ) [compound]
  GLOBAL METHODS
    method create( asset:Asset )->Image
      return Image( Texture(asset) )

    method create( bitmap:Bitmap )->Image
      return Image( Texture(bitmap), bitmap.size, Box(1,1)->Quad )

  METHODS
    method draw( position:XY, style:Style )
      if (not texture.is_loaded)
        println "[Plasmacore] Image has not finished loading - check .is_loaded before drawing."
      endIf

      local size = size * style.scale
      local has_transform = style.transform or style.rotate.value

      if (style.transform)
        local m = Matrix.translate( position )
        m *= style.transform.value
        m *= Matrix.transform( XYZ(size,1), style.anchor )
        ObjectTransform.push( m )
      elseIf (style.rotate.value)
        ObjectTransform.push( Matrix.transform(XYZ(position,0), size, style.anchor, style.rotate.value) )
      else
        position -= size * style.anchor.position
      endIf

      localize uv
      local uva = uv.a
      local uvb = uv.b
      local uvc = uv.c
      local uvd = uv.d

      if (style.hflip)
        swapValues( uva, uvb )
        swapValues( uvc, uvd )
      endIf
      if (style.vflip)
        swapValues( uva, uvc )
        swapValues( uvb, uvd )
      endIf

      local render_mode = style.render_mode
      if (render_mode is null)
        if (style.has_color or style.has_colors)
          render_mode = RenderMode.ALPHA_TEXTURE_MULTIPLY
        else
          render_mode = RenderMode.ALPHA_TEXTURE
        endIf
      endIf

      use mode = render_mode
        mode.texture = @texture
        if (has_transform)
          # Position & size are incorporated in ObjectTransform
          mode.add_positions( XY(0,0), XY(1,1), XY(1,0) )
          mode.add_positions( XY(0,0), XY(0,1), XY(1,1) )
        else
          mode.add_positions( position, position+size, position+size.xv )
          mode.add_positions( position, position+size.yv, position+size )
        endIf
        mode.add_uvs( uva, uvc, uvb )
        mode.add_uvs( uva, uvd, uvc )
        if (style.has_colors)
          local colors = style.colors
          mode.colors.add( colors.a )
          mode.colors.add( colors.c )
          mode.colors.add( colors.b )
          mode.colors.add( colors.a )
          mode.colors.add( colors.d )
          mode.colors.add( colors.c )
        elseIf (style.has_color)
          local color = style.color
          loop (6) mode.colors.add( color )
        endIf
      endUse

      if (has_transform)
        ObjectTransform.pop
      endIf

    method is_loaded->Logical
      return (texture.is_loaded)

    method size->XY
      if (@size) return @size.value
      return texture.size

    method uv->Quad
      if (@uv) return @uv.value
      return texture.uv->Quad
endClass

