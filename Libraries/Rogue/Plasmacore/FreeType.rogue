module Plasmacore

# Kerning info example:
# https://freetype.org/freetype2/docs/tutorial/step2.html

class FreeTypeFace
  DEPENDENCIES
    $if not defined(CUSTOM_BITMAP_IO)
      # Must include png.h before ft2build.h to fix an order-of-include issue with png and setjmp on Linux
      nativeHeader #include <png.h>
    $endIf
    nativeHeader
      #include <ft2build.h>
      #include FT_FREETYPE_H
    endNativeHeader

    nativeCode
      FT_Library Plasmacore_freetype_library;
    endNativeCode

  PROPERTIES
    pixel_height : Int32
    ft_height    : Int32
    native "FT_Face ft_face;"

  METHODS
    method init( name:String, pixel_height )
      ft_height = pixel_height

      local filepath = "Assets/Fonts/" + name
      if (not File.exists(filepath)) filepath = "/Library/Fonts" / name
      if (not File.exists(filepath)) filepath = "/System/Library/Fonts" / name
      if (not File.exists(filepath)) filepath = "/System/Library/Fonts/Supplemental" / name
      if (not File.exists(filepath)) throw Error( "Unable to find font: " + name )

      if (not native("Plasmacore_freetype_library")->Logical)
        # Initialize FreeType library
        if (native("FT_Init_FreeType(&Plasmacore_freetype_library)")->Int32)
          throw Error( "FreeType library failed to initialize." )
        endIf
        on_exit( () => native "FT_Done_FreeType( Plasmacore_freetype_library );" )
      endIf

      if (native("FT_New_Face( Plasmacore_freetype_library, (char*)$filepath->utf8, 0, &$this->ft_face )")->Int32)
        throw Error( "Error loading $." (name) )
      endIf

    method render( unicode:Int32[] )->Bitmap[]
      local max_offset = 0  # note: "max" values are more negative

      loop
        contingent
          native "FT_Set_Pixel_Sizes( $this->ft_face, 0, $ft_height );"

          sufficient (ft_height <= 8)

          # FT does not guarantee rendered characters within our pixel_height. Therefore
          # we may make more than one pass to find the true bounds at the current pixel_height
          # and reduce if necessary.
          local max_height = 0
          max_offset = 0
          forEach (code in unicode)
            if (0 == native("FT_Load_Char( $this->ft_face, $code, FT_LOAD_RENDER )")->Int32)
              local h      = native( "(RogueInt32)$this->ft_face->glyph->bitmap.rows" )->Int32
              local offset = native( "(RogueInt32)-$this->ft_face->glyph->bitmap_top" )->Int32
              max_height = max_height.or_larger( h )
              max_offset = max_offset.or_smaller( offset )
            endIf
          endForEach

          necessary (max_height <= pixel_height)

          # Check each character one more time, ensuring that once the delta between the character
          # offset and the max offset is taken into account, the adjusted height still does not
          # exceed our max height.
          forEach (code in unicode)
            if (0 == native("FT_Load_Char( $this->ft_face, $code, FT_LOAD_RENDER )")->Int32)
              local h      = native( "(RogueInt32)$this->ft_face->glyph->bitmap.rows" )->Int32
              local offset = native( "(RogueInt32)-$this->ft_face->glyph->bitmap_top" )->Int32
              necessary (h + offset <= pixel_height + max_offset)
            endIf
          endForEach

        satisfied
          escapeLoop

        unsatisfied
          --ft_height

        endContingent
      endLoop

      # Actually render character bitmaps.
      local bitmaps = Bitmap[]( unicode.count )
      forEach (code in unicode)
        if (native("FT_Load_Char( $this->ft_face, $code, FT_LOAD_RENDER )")->Int32)
          bitmaps.add( Bitmap(1,pixel_height,Color(0x00FFffFF)) )
        else
          local w        = native( "(RogueInt32)$this->ft_face->glyph->bitmap.width" )->Int32
          local h        = native( "(RogueInt32)$this->ft_face->glyph->bitmap.rows" )->Int32
          local offset_x = native( "(RogueInt32)-$this->ft_face->glyph->bitmap_left" )->Int32
          local offset_y = native( "(RogueInt32)-$this->ft_face->glyph->bitmap_top" )->Int32
          local advance_x = native( "(RogueInt32)$this->ft_face->glyph->advance.x" )->Int32 / 64
          #local advance_y = native( "(RogueInt32)$this->ft_face->glyph->advance.y" )->Int32 / 64
          if ((offset_y - max_offset) + h > pixel_height)
            trace "ERROR: font character exceeds max height."
            h = pixel_height - (offset_y - max_offset)
          endIf

          if (w > 0)
            local pitch = native( "(RogueInt32)$this->ft_face->glyph->bitmap.pitch" )->Int32
            native "RogueByte* src = (RogueByte*) $this->ft_face->glyph->bitmap.buffer;"
            local bmp = Bitmap( w, pixel_height, Color(0x00FFffFF) )
            local src_i = 0
            local dest_i = (offset_y - max_offset) * w
            local column_skip = pitch - w
            forEach (j in 1..h)
              forEach (i in 1..w)
                local a = native( "(RogueInt32)(src[$src_i++])" )->Int32
                bmp.pixels[dest_i] = Color(255,255,255,a)
                ++dest_i
              endForEach
              src_i += column_skip
            endForEach
            if (advance_x > w)
              local padded_bmp = Bitmap( advance_x, pixel_height, Color(0x00FFffFF) )
              bmp.blit( padded_bmp, XY(-offset_x,0) )
              bitmaps.add( padded_bmp )
            else
              bitmaps.add( bmp )
            endIf

          else
            bitmaps.add( Bitmap(advance_x,pixel_height,Color(0x00FFffFF)) )
          endIf
        endIf
      endForEach

      return bitmaps

endClass
