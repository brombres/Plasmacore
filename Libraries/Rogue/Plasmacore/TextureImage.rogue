module Plasmacore

class TextureImage : Image
  PROPERTIES
    texture : Texture
    uv      : Quad?

  METHODS
    method init( asset:ImageAsset )
      init( Texture(asset) )

    method init( texture, uv=null )

    method draw( position:XY, rotation=null:Radians?, anchor=Anchor.CENTER:Anchor, render_mode=null:RenderMode )
      if (not is_loaded)
        println "[Plasmacore] Image has not finished loading - check .is_loaded before drawing."
      endIf
      if (not @uv)
        println "[Plasmacore] Image uv coordinates are undefined."
      endIf

      localize size
      if (rotation)
        ObjectTransform.push( Matrix.transform(XYZ(position,0), size, anchor, rotation.value) )
      else
        position -= size * anchor.position
      endIf

      localize uv
      local uva = uv.a
      local uvb = uv.b
      local uvc = uv.c
      local uvd = uv.d

      if (hflip)
        swapValues( uva, uvb )
        swapValues( uvc, uvd )
      endIf
      if (vflip)
        swapValues( uva, uvc )
        swapValues( uvb, uvd )
      endIf

      if (render_mode is null) render_mode = RenderMode.TEXTURED_POLYGONS
      use mode = render_mode
        mode.texture = texture
        if (rotation)
          # Position & size are incorporated in ObjectTransform
          mode.add_positions( XY(0,0), XY(1,1), XY(1,0) )
          mode.add_positions( XY(0,0), XY(0,1), XY(1,1) )
        else
          mode.add_positions( position, position+size, position+size.xv )
          mode.add_positions( position, position+size.yv, position+size )
        endIf
        mode.add_uvs( uva, uvc, uvb )
        mode.add_uvs( uva, uvd, uvc )
        mode.colors.add( Color.RED )
        mode.colors.add( Color.RED )
        mode.colors.add( Color.RED )
        mode.colors.add( Color.RED )
      endUse

      if (rotation) ObjectTransform.pop

    method draw( position:XY, rotation:Matrix, anchor=Anchor.CENTER:Anchor, render_mode=null:RenderMode )
      if (not is_loaded)
        println "[Plasmacore] Image has not finished loading - check .is_loaded before drawing."
      endIf
      if (not @uv)
        println "[Plasmacore] Image uv coordinates are undefined."
      endIf

      local m = Matrix.translate( position )
      m *= rotation
      m *= Matrix.transform( XYZ(size,1), anchor )
      ObjectTransform.push( m )

      localize uv
      local uva = uv.a
      local uvb = uv.b
      local uvc = uv.c
      local uvd = uv.d

      if (hflip)
        swapValues( uva, uvb )
        swapValues( uvc, uvd )
      endIf
      if (vflip)
        swapValues( uva, uvc )
        swapValues( uvb, uvd )
      endIf

      if (render_mode is null) render_mode = RenderMode.TEXTURED_POLYGONS
      use mode = render_mode
        mode.texture = texture
        mode.add_positions( XY(0,0), XY(1,1), XY(1,0) )
        mode.add_positions( XY(0,0), XY(0,1), XY(1,1) )
        mode.add_uvs( uva, uvc, uvb )
        mode.add_uvs( uva, uvd, uvc )
      endUse

      ObjectTransform.pop

    method is_loaded->Logical
      if (prior.is_loaded) return true
      if (not texture.is_loaded) return false

      is_loaded = true
      if (original_size == XY.zero)
        original_size = texture.image_size
        size = original_size
      endIf

      if (not @uv) @uv = Box(texture.uv_max)->Quad

      return true

    method set_uv( @uv )

    method uv->Quad
      return @uv.value
endClass
