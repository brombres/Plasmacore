module Plasmacore

class PVKInstanceConfiguration
  GLOBAL PROPERTIES
    available_extensions : String[]
    available_layers     : String[]

  PROPERTIES
    app_name           : String
    app_version_code   : Int32
    enabled_extensions = String[]
    enabled_layers     = String[]

  GLOBAL METHODS
    method available_extensions->String[]
      if (not @available_extensions) @available_extensions = VKInstance.instance_extensions
      return @available_extensions

    method available_layers->String[]
      if (not @available_layers) @available_layers = VKInstance.instance_layers
      return @available_layers

  METHODS
    method init
      init( "Plasmacore2023", Plasmacore.VERSION_CODE )

    method init( app_name, app_version_code )
      # Identifying your app allows driver manufacturers to potentially optimize Vulkan drivers for your game.
      enable_extension( "VK_KHR_get_physical_device_properties2" )
      enable_extension( "VK_KHR_surface" )
      enable_extension( "VK_EXT_metal_surface" )

    method enable_debug( setting:Logical )
      if (setting)
        enable_extension( "VK_EXT_debug_utils" )
        enable_layer( "VK_LAYER_KHRONOS_validation" )
      endIf

    method enable_extension( name:String )->Logical
      if (available_extensions.contains(name))
        if (enabled_extensions.contains(name)) return true
        enabled_extensions.add( name )
        return true
      else
        return false
      endIf

    method enable_layer( name:String )->Logical
      if (available_layers.contains(name))
        if (enabled_layers.contains(name)) return true
        enabled_layers.add( name )
        return true
      else
        return false
      endIf

endClass

class PVKInstance [essential api singleton]
  PROPERTIES
    is_configured : Logical

    instance : VKInstance

    native "VkInstance instance_value;"

    native "PFN_vkGetDeviceProcAddr                       fn_vkGetDeviceProcAddr;"
    native "PFN_vkGetPhysicalDeviceSurfaceSupportKHR      fn_vkGetPhysicalDeviceSurfaceSupportKHR;"
    native "PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR fn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR;"
    native "PFN_vkGetPhysicalDeviceSurfaceFormatsKHR      fn_vkGetPhysicalDeviceSurfaceFormatsKHR;"
    native "PFN_vkGetPhysicalDeviceSurfacePresentModesKHR fn_vkGetPhysicalDeviceSurfacePresentModesKHR;"
    native "PFN_vkGetSwapchainImagesKHR                   fn_vkGetSwapchainImagesKHR;"

  METHODS
    method configure [api]
      configure( "Plasmacore App", 1 )

    method configure( app_name="Plasmacore App":String, app_version_code=1:Int32 ) [api]
      # Identifying your app allows driver manufacturers to potentially optimize Vulkan drivers for your game.
      if (is_configured) return
      is_configured = true

      local app_info = VKApplicationInfo( app_name, app_version_code, "Plasmacore2023", Plasmacore.VERSION_CODE )

      local create_info = VKInstanceCreateInfo( app_info )
      create_info.enable_extension( "VK_KHR_get_physical_device_properties2" )
      create_info.enable_extension( "VK_KHR_surface" )
      create_info.enable_extension( "VK_EXT_metal_surface" )
      create_info.enable_extension( "VK_KHR_portability_enumeration" )

      instance = VKInstance( create_info )

      native
        @|$this->instance_value = $this->instance->instance_value;

      log.println "[Vulkan] Created instance"

      native
        @|$this->fn_vkGetDeviceProcAddr = (PFN_vkGetDeviceProcAddr)
         |    vkGetInstanceProcAddr( $this->instance_value, "vkGetDeviceProcAddr" );
         |$this->fn_vkGetPhysicalDeviceSurfaceSupportKHR = (PFN_vkGetPhysicalDeviceSurfaceSupportKHR)
         |    vkGetInstanceProcAddr( $this->instance_value, "vkGetPhysicalDeviceSurfaceSupportKHR" );
         |$this->fn_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR)
         |    vkGetInstanceProcAddr( $this->instance_value, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR" );
         |$this->fn_vkGetPhysicalDeviceSurfaceFormatsKHR = (PFN_vkGetPhysicalDeviceSurfaceFormatsKHR)
         |    vkGetInstanceProcAddr( $this->instance_value, "vkGetPhysicalDeviceSurfaceFormatsKHR" );
         |$this->fn_vkGetPhysicalDeviceSurfacePresentModesKHR = (PFN_vkGetPhysicalDeviceSurfacePresentModesKHR)
         |    vkGetInstanceProcAddr( $this->instance_value, "vkGetPhysicalDeviceSurfacePresentModesKHR" );
         |$this->fn_vkGetSwapchainImagesKHR = (PFN_vkGetSwapchainImagesKHR)
         |    vkGetInstanceProcAddr( $this->instance_value, "vkGetSwapchainImagesKHR" );

    method physical_devices->VKGPUInfo[]
      local result = VKGPUInfo[]
      native
        @|uint32_t count = 0;
         |VkResult err = vkEnumeratePhysicalDevices( $this->instance_value, &count, NULL );
         |if ( !err && count && count < 64 )
         |{
         |  VkPhysicalDevice devices[64];
         |  int i;
         |  err = vkEnumeratePhysicalDevices( $this->instance_value, &count, devices );
         |  for (i=0; i<count; ++i)
         |  {
              local device_info = VKGPUInfo()
      native
        @|    $device_info->index = (RogueInt32) i;
         |    $device_info->gpu   = devices[i];
         |    vkGetPhysicalDeviceProperties( devices[i], &$device_info->properties );
         |    vkGetPhysicalDeviceFeatures( devices[i], &$device_info->features );
         |    vkGetPhysicalDeviceMemoryProperties( devices[i], &$device_info->memory_properties );
              result.add( device_info );
      native
        @|  }
         |}
      return result
endClass

