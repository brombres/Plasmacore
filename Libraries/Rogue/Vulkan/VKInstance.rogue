module Vulkan

class VKInstance
  PROPERTIES
    context         : VKContext
    native_instance : VKNativeInstance

  GLOBAL METHODS
    method instance_extensions->String[]
      local result = String[]

      native
        @|uint32_t count = 0;
         |vkEnumerateInstanceExtensionProperties( NULL, &count, NULL );
         |
         |if (count > 0 && count <= 256)
         |{
         |  VkExtensionProperties instance_extensions[256];
         |  vkEnumerateInstanceExtensionProperties( NULL, &count, instance_extensions );
         |  for (uint32_t i = 0; i < count; i++)
         |  {
              result.add( native("RogueString_create(instance_extensions[i].extensionName)")->String )

      native
        @|  }
         |}

      return result

    method instance_layers->String[]
      local result = String[]

      native
        @|uint32_t count = 0;
         |vkEnumerateInstanceLayerProperties( &count, NULL );
         |
         |if (count > 0 && count <= 256)
         |{
         |  VkLayerProperties instance_layers[256];
         |  vkEnumerateInstanceLayerProperties( &count, instance_layers );
         |  for (uint32_t i = 0; i < count; i++)
         |  {
              result.add( native("RogueString_create(instance_layers[i].layerName)")->String )

      native
        @|  }
         |}

      return result

  METHODS
    method init( create_info:VKInstanceCreateInfo )
      context = create_info.context

      native
        @|vkCreateInstance( &$create_info->info_value, NULL, &$native_instance.value );

      SET_NATIVE_PROCEDURE<<context,this,vkGetDeviceProcAddr>>
      SET_NATIVE_PROCEDURE<<context,this,vkGetPhysicalDeviceSurfaceSupportKHR>>
      SET_NATIVE_PROCEDURE<<context,this,vkGetPhysicalDeviceSurfaceCapabilitiesKHR>>
      SET_NATIVE_PROCEDURE<<context,this,vkGetPhysicalDeviceSurfaceFormatsKHR>>
      SET_NATIVE_PROCEDURE<<context,this,vkGetPhysicalDeviceSurfacePresentModesKHR>>

    method procedure_address( name:String )->RogueVoidPointer
      local result : RogueVoidPointer
      native @|$result.value = vkGetInstanceProcAddr( $native_instance.value, $name->data->as_utf8 );
      return result

    method physical_devices->VKPhysicalDevice[]
      local count : Int32
      local result = VKPhysicalDevice[]

      native
        @|VkPhysicalDevice devices[64];
         |vkEnumeratePhysicalDevices( $native_instance.value, (uint32_t*)&$count, NULL );

      if (count and count <= 64)
        native @|vkEnumeratePhysicalDevices( $native_instance.value, (uint32_t*)&$count, devices );
        forEach (i in 0..<count)
          local native_gpu = native("(VKNativeGPU){devices[$i]}")->VKNativeGPU
          local device = VKPhysicalDevice( context, native_gpu, i )
          result.add( device );
        endForEach
      endIf

      return result
endClass
