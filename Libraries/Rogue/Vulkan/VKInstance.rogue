module Vulkan

class VKInstance
  PROPERTIES
    native "VkInstance instance_value;"

  GLOBAL METHODS
    method instance_extensions->String[]
      local result = String[]

      native
        @|uint32_t count = 0;
         |vkEnumerateInstanceExtensionProperties( NULL, &count, NULL );
         |
         |if (count > 0 && count <= 256)
         |{
         |  VkExtensionProperties instance_extensions[256];
         |  vkEnumerateInstanceExtensionProperties( NULL, &count, instance_extensions );
         |  for (uint32_t i = 0; i < count; i++)
         |  {
              result.add( native("RogueString_create(instance_extensions[i].extensionName)")->String )

      native
        @|  }
         |}

      return result

    method instance_layers->String[]
      local result = String[]

      native
        @|uint32_t count = 0;
         |vkEnumerateInstanceLayerProperties( &count, NULL );
         |
         |if (count > 0 && count <= 256)
         |{
         |  VkLayerProperties instance_layers[256];
         |  vkEnumerateInstanceLayerProperties( &count, instance_layers );
         |  for (uint32_t i = 0; i < count; i++)
         |  {
              result.add( native("RogueString_create(instance_layers[i].layerName)")->String )

      native
        @|  }
         |}

      return result

  METHODS
    method init( create_info:VKInstanceCreateInfo )
      native
        @|vkCreateInstance( &$create_info->info_value, NULL, &$this->instance_value);

    method device_procedure_address( name:String )->RogueVoidPointer
      local result : RogueVoidPointer
      native @|$result.value = vkGetInstanceProcAddr( $this->instance_value, $name->data->as_utf8 );
      return result

    method physical_devices->Plasmacore::VKGPUInfo[]
      local result = Plasmacore::VKGPUInfo[]
      native
        @|uint32_t count = 0;
         |VkResult err = vkEnumeratePhysicalDevices( $this->instance_value, &count, NULL );
         |if ( !err && count && count < 64 )
         |{
         |  VkPhysicalDevice devices[64];
         |  int i;
         |  err = vkEnumeratePhysicalDevices( $this->instance_value, &count, devices );
         |  for (i=0; i<count; ++i)
         |  {

      local device_info = Plasmacore::VKGPUInfo()
      native
        @|    $device_info->index = (RogueInt32) i;
         |    $device_info->gpu   = devices[i];
         |    vkGetPhysicalDeviceProperties( devices[i], &$device_info->properties );
         |    vkGetPhysicalDeviceFeatures( devices[i], &$device_info->features );
         |    vkGetPhysicalDeviceMemoryProperties( devices[i], &$device_info->memory_properties );
              result.add( device_info );
      native
        @|  }
         |}
      return result
endClass
