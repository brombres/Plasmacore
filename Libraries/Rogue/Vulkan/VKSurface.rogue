module Vulkan

class VKSurface
  PROPERTIES
    context        : VKContext

    native_surface : VKNativeSurface
    gpu            : VKGPU
    capabilities   : VKNativeSurfaceCapabilities
    is_cleaned_up  : Logical

  #{
    renderer      : VulkanRenderer

    native "VkSurfaceKHR surface_value;"

    present_modes : VKPresentMode[]
    }#

  METHODS
    method init( context )

      #|  $renderer->vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
      #|    $renderer->gpu->device_value, $this->surface_value, &capabilities
      #|  );

    #{
    method init( renderer )

    method current_transform->VKSurfaceTransform
      local result : Int32
      local renderer = VulkanRenderer
      native
        @|{
         |  VkSurfaceCapabilitiesKHR capabilities;
         |  $renderer->vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
         |    $renderer->gpu->device_value, $this->surface_value, &capabilities
         |  );
         |  $result = (RogueInt32) capabilities.currentTransform;
         |}
      return VKSurfaceTransform( result )
      }#

    method destroy
      on_cleanup

      #{
    method max_buffer_count->Int32
      local result : Int32
      local renderer = VulkanRenderer
      native
        @|{
         |  VkSurfaceCapabilitiesKHR capabilities;
         |  $renderer->vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
         |    $renderer->gpu->device_value, $this->surface_value, &capabilities
         |  );
         |  $result = (RogueInt32) capabilities.maxImageCount;
         |}
      return result

    method max_size->XY
      local w, h : Int32
      local renderer = VulkanRenderer
      native
        @|{
         |  VkSurfaceCapabilitiesKHR capabilities;
         |  $renderer->vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
         |    $renderer->gpu->device_value, $this->surface_value, &capabilities
         |  );
         |  $w = (RogueInt32) capabilities.maxImageExtent.width;
         |  $h = (RogueInt32) capabilities.maxImageExtent.height;
         |}
       return XY( w, h )

    method min_buffer_count->Int32
      local result : Int32
      local renderer = VulkanRenderer
      native
        @|{
         |  VkSurfaceCapabilitiesKHR capabilities;
         |  $renderer->vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
         |    $renderer->gpu->device_value, $this->surface_value, &capabilities
         |  );
         |  $result = (RogueInt32) capabilities.minImageCount;
         |}
      return result

    method min_size->XY
      local w, h : Int32
      local renderer = VulkanRenderer
      native
        @|{
         |  VkSurfaceCapabilitiesKHR capabilities;
         |  $renderer->vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
         |    $renderer->gpu->device_value, $this->surface_value, &capabilities
         |  );
         |  $w = (RogueInt32) capabilities.minImageExtent.width;
         |  $h = (RogueInt32) capabilities.minImageExtent.height;
         |}
       return XY( w, h )
       }#

    method on_cleanup
      if (is_cleaned_up) return
      is_cleaned_up = true
trace "----"
      native @|vkDestroySurfaceKHR( $context->instance->native_instance.value, $this->native_surface.value, NULL );

        #{
    method present_modes->VKPresentMode[]
      if (@present_modes) return @present_modes

      local vk_instance = VulkanRenderer
      local result = VKPresentMode[]
      native
        @|{
         |  PFN_vkGetPhysicalDeviceSurfacePresentModesKHR get_modes = $vk_instance->vkGetPhysicalDeviceSurfacePresentModesKHR;
         |  uint32_t count = 0;
         |
         |  get_modes( $renderer->gpu->device_value, $this->surface_value, &count, NULL );
         |  if (count && count < 32)
         |  {
         |    VkPresentModeKHR modes[32];
         |    int i;
         |    get_modes( $renderer->gpu->device_value, $this->surface_value, &count, modes );
         |    for (i=0; i<count; ++i)
         |    {
                local mode : Int32
      native
        @|      $mode = (RogueInt32) modes[i];
                result.add( VKPresentMode(mode) );
      native
        @|    }
         |  }
         |}

         @present_modes = result

      return @present_modes

    method size->XY
      local w, h : Int32
      local renderer = VulkanRenderer
      native
        @|{
         |  VkSurfaceCapabilitiesKHR capabilities;
         |  $renderer->vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
         |    $renderer->gpu->device_value, $this->surface_value, &capabilities
         |  );
         |  $w = (RogueInt32) capabilities.currentExtent.width;
         |  $h = (RogueInt32) capabilities.currentExtent.height;
         |}
       return XY( w, h )

    method supports_composite_alpha_type( type:VKCompositeAlphaType )->Logical
      local supported_alpha : Int32
      local renderer = VulkanRenderer
      native
        @|{
         |  VkSurfaceCapabilitiesKHR capabilities;
         |  $renderer->vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
         |    $renderer->gpu->device_value, $this->surface_value, &capabilities
         |  );
         |  $supported_alpha = (RogueInt32) capabilities.supportedCompositeAlpha;
         |}
      return (supported_alpha & type->Int32)?

    method supports_transform( transform:VKSurfaceTransform )->Logical
      local supported_transforms : Int32
      local renderer = VulkanRenderer
      native
        @|{
         |  VkSurfaceCapabilitiesKHR capabilities;
         |  $renderer->vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
         |    $renderer->gpu->device_value, $this->surface_value, &capabilities
         |  );
         |  $supported_transforms = (RogueInt32) capabilities.supportedTransforms;
         |}
      return (supported_transforms & transform->Int32)?
      }#

endClass
