module Vulkan

uses Graphics [export]

$macro NATIVE_PROCEDURE<<$procedure_name>>
  $procedure_name : VKNativeProcedure<<$procedure_name>>
$endMacro

$macro SET_NATIVE_PROCEDURE<<$var_context,$source_context,$procedure_name>>
  $var_context.$procedure_name = VKNativeProcedure<<$procedure_name>>( $source_context.procedure_address($string($procedure_name)) )
$endMacro

$include Vulkan/VKAccess
$include Vulkan/VKApplicationInfo
$include Vulkan/VKBorderColor
$include Vulkan/VKBuffer
$include Vulkan/VKAllocatedImage
$include Vulkan/VKBufferUsage
$include Vulkan/VKFormat
$include Vulkan/VKColorSpace
$include Vulkan/VKCommandBuffer
$include Vulkan/VKCommandPool
$include Vulkan/VKCompareOp
$include Vulkan/VKCompositeAlphaType
$include Vulkan/VKContext
$include Vulkan/VKDescriptorType
$include Vulkan/VKDevice
$include Vulkan/VKDeviceConfig
$include Vulkan/VKDeviceType
$include Vulkan/VKFilter
$include Vulkan/VKImage
$include Vulkan/VKImageAspect
$include Vulkan/VKImageLayout
$include Vulkan/VKImageUsage
$include Vulkan/VKInstance
$include Vulkan/VKInstanceConfig
$include Vulkan/VKGPU
$include Vulkan/VKMemoryProperty
$include Vulkan/VKPipelineStage
$include Vulkan/VKPresentMode
$include Vulkan/VKQueueFamily
$include Vulkan/VKSamplerAddressMode
$include Vulkan/VKSamplerMipmapMode
$include Vulkan/VKShaderStage
$include Vulkan/VKSharingMode
$include Vulkan/VKSurface
$include Vulkan/VKSurfaceFormat
$include Vulkan/VKSurfaceTransform
$include Vulkan/VKSwapchain
$include Vulkan/VKSwapchainImage
$include Vulkan/VKTextureImage

#$include Vulkan/VKRenderBuffer

nativeHeader
  @|#define VK_USE_PLATFORM_METAL_EXT 1
   |#include <vulkan/vulkan.h>

NATIVE_POINTER_TYPE<< VKNativeBuffer,        "%Ns%VkBuffer" >>
NATIVE_POINTER_TYPE<< VKNativeCommandBuffer, "%Ns%VkCommandBuffer" >>
NATIVE_POINTER_TYPE<< VKNativeCommandPool,   "%Ns%VkCommandPool" >>
NATIVE_POINTER_TYPE<< VKNativeDescriptorSet, "%Ns%VkDescriptorSet" >>
NATIVE_POINTER_TYPE<< VKNativeDevice,        "%Ns%VkDevice" >>
NATIVE_POINTER_TYPE<< VKNativeDeviceMemory,  "%Ns%VkDeviceMemory" >>
NATIVE_POINTER_TYPE<< VKNativeFramebuffer,   "%Ns%VkFramebuffer" >>
NATIVE_POINTER_TYPE<< VKNativeGPU,           "%Ns%VkPhysicalDevice" >>
NATIVE_POINTER_TYPE<< VKNativeImage,         "%Ns%VkImage" >>
NATIVE_POINTER_TYPE<< VKNativeInstance,      "%Ns%VkInstance" >>
NATIVE_POINTER_TYPE<< VKNativeSampler,       "%Ns%VkSampler" >>
NATIVE_POINTER_TYPE<< VKNativeSurface,       "%Ns%VkSurfaceKHR" >>
NATIVE_POINTER_TYPE<< VKNativeSurfaceFormat, "%Ns%VkSurfaceFormatKHR" >>

nativeType<<"%Ns%VkImageView">> VKNativeImageView

class VKNativeProcedure<<$NativeType>> [compound]
  PROPERTIES
    native "PFN_$NativeType value;"

  GLOBAL METHODS
    method create( pointer:RogueVoidPointer )->VKNativeProcedure<<$NativeType>>
      local result : VKNativeProcedure<<$NativeType>>
      native @|$result.value = $pointer.value;
      return result
endClass

