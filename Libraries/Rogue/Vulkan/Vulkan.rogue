module Vulkan

$macro NATIVE_PROCEDURE<<$procedure_name>>
  $procedure_name : VKNativeProcedure<<$procedure_name>>
$endMacro

$macro SET_NATIVE_PROCEDURE<<$var_context,$source_context,$procedure_name>>
  $var_context.$procedure_name = VKNativeProcedure<<$procedure_name>>( $source_context.procedure_address($string($procedure_name)) )
$endMacro

$include Vulkan/VKApplicationInfo
$include Vulkan/VKContext
$include Vulkan/VKDeviceConfig
$include Vulkan/VKDeviceType
$include Vulkan/VKInstance
$include Vulkan/VKInstanceConfig
$include Vulkan/VKGPU

$include Vulkan/VKBitFormat
$include Vulkan/VKColorSpace
$include Vulkan/VKCompositeAlphaType
$include Vulkan/VKDevice
$include Vulkan/VKPresentMode
$include Vulkan/VKQueueFamily
$include Vulkan/VKRenderBuffer
$include Vulkan/VKSurface
$include Vulkan/VKSurfaceFormat
$include Vulkan/VKSurfaceTransform
$include Vulkan/VKSwapchain

nativeHeader
  @|#define VK_USE_PLATFORM_METAL_EXT 1
   |#include <vulkan/vulkan.h>

nativeType<<"VkDevice">>                 VKNativeDevice
nativeType<<"VkPhysicalDevice">>         VKNativeGPU
nativeType<<"VkInstance">>               VKNativeInstance
nativeType<<"VkSurfaceKHR">>             VKNativeSurface
nativeType<<"VkSurfaceCapabilitiesKHR">> VKNativeSurfaceCapabilities

class VKNativeProcedure<<$NativeType>> [compound]
  PROPERTIES
    native "PFN_$NativeType value;"

  GLOBAL METHODS
    method create( pointer:RogueVoidPointer )->VKNativeProcedure<<$NativeType>>
      local result : VKNativeProcedure<<$NativeType>>
      native @|$result.value = $pointer.value;
      return result
endClass

