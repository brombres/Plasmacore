module Vulkan

class VKCommandPool
  PROPERTIES
    context      : VKContext
    native_pool  : VKNativeCommandPool
    queue_family : VKQueueFamily

  METHODS
    method init( context, queue_family )
      native
        @|VkCommandPoolCreateInfo cmd_pool_config =
         |{
         |  .sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO,
         |  .pNext = 0,
         |  .queueFamilyIndex = $queue_family.index,
         |  .flags = 0,
         |};
         |vkCreateCommandPool( $context->device->native_device.value, &cmd_pool_config, NULL, &$native_pool.value );

    method destroy
      on_cleanup

    method on_cleanup
      native
        @|if ($native_pool.value != VK_NULL_HANDLE)
         |{
         |  VkDevice device    = $context->device->native_device.value;
         |  vkDestroyCommandPool( device, $native_pool.value, NULL );
         |  $native_pool.value = VK_NULL_HANDLE;
         |}

    method create_command_buffer->VKCommandBuffer
      local native_buffer : VKNativeCommandBuffer

      native
        @|
         |VkCommandBufferAllocateInfo cmd_buffer_config =
         |{
         |    .sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO,
         |    .pNext = NULL,
         |    .commandPool = $native_pool.value,
         |    .level = VK_COMMAND_BUFFER_LEVEL_PRIMARY,
         |    .commandBufferCount = 1,
         |};
         |vkAllocateCommandBuffers( $context->device->native_device.value, &cmd_buffer_config, &$native_buffer.value );

      return VKCommandBuffer( context, native_buffer )

endClass
