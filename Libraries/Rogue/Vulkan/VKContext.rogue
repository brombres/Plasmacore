module Vulkan

class VKContext
  PROPERTIES
    instance : VKInstance
    gpu      : VKGPU
    surface  : VKSurface
    device   : VKDevice

    graphics_queue_family            : VKQueueFamily
    presentation_queue_family        : VKQueueFamily
    uses_separate_presentation_queue : Logical

    # VkInstance functions
    NATIVE_PROCEDURE<<vkGetDeviceProcAddr>>
    NATIVE_PROCEDURE<<vkGetPhysicalDeviceSurfaceSupportKHR>>
    NATIVE_PROCEDURE<<vkGetPhysicalDeviceSurfaceCapabilitiesKHR>>
    NATIVE_PROCEDURE<<vkGetPhysicalDeviceSurfaceFormatsKHR>>
    NATIVE_PROCEDURE<<vkGetPhysicalDeviceSurfacePresentModesKHR>>

    # VkDevice functions
    NATIVE_PROCEDURE<<vkCreateSwapchainKHR>>
    NATIVE_PROCEDURE<<vkDestroySwapchainKHR>>
    NATIVE_PROCEDURE<<vkGetSwapchainImagesKHR>>
    NATIVE_PROCEDURE<<vkAcquireNextImageKHR>>
    NATIVE_PROCEDURE<<vkQueuePresentKHR>>

  METHODS
    method find_queue_families
      block
        # Find a queue family that supports both graphics and presentation
        forEach (family in gpu.queue_families)
          if (family.supports_graphics and family.supports_presenting)
            graphics_queue_family = family
            presentation_queue_family = family
            escapeBlock
          endIf
        endForEach

        # Find separate queue families for graphics and for presentation
        forEach (family in gpu.queue_families)
          if (family.supports_graphics)
            graphics_queue_family = family
            escapeForEach
          endIf
        endForEach

        forEach (family in gpu.queue_families)
          if (family.supports_presenting)
            presentation_queue_family = family
            escapeBlock
          endIf
        endForEach

      endBlock

      uses_separate_presentation_queue = (graphics_queue_family.index != presentation_queue_family.index)

      trace "----" graphics_queue_family
      trace "----" presentation_queue_family

endClass
