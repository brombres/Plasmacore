module Plasmacore

class VKDevice
  PROPERTIES
    native "VkDevice device_value;"

    native "VkQueue          graphics_queue;"
    native "VkQueue          presentation_queue;"

  METHODS
    method init( config:VKDeviceCreateInfo )
      local renderer = VulkanRenderer

      native
        @|float queue_priorities[1] = {0.0};
         |const char* extension_names[64];
         |
         |VkDeviceQueueCreateInfo queues[2];
         |queues[0].sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
         |queues[0].pNext = NULL;
         |queues[0].queueFamilyIndex = $renderer->graphics_queue_family.index;
         |queues[0].queueCount = 1;
         |queues[0].pQueuePriorities = queue_priorities;
         |queues[0].flags = 0;

      forEach (extension_name at i in config.enabled_extensions)
        native @|extension_names[$i] = $extension_name->data->as_utf8;
      endForEach

      native
        @|
         |VkDeviceCreateInfo device_info =
         |{
         |  .sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO,
         |  .pNext = NULL,
         |  .queueCreateInfoCount = 1,
         |  .pQueueCreateInfos = queues,
         |  .enabledLayerCount = 0,
         |  .ppEnabledLayerNames = NULL,
         |  .enabledExtensionCount = $config->enabled_extensions->count,
         |  .ppEnabledExtensionNames = extension_names,
         |  .pEnabledFeatures = NULL,  // If specific features are required, pass them in here
         |};
         |
         |if ($renderer->uses_separate_presentation_queue)
         |{
         |  queues[1].sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
         |  queues[1].pNext = NULL;
         |  queues[1].queueFamilyIndex = $renderer->presentation_queue_family.index;
         |  queues[1].queueCount = 1;
         |  queues[1].pQueuePriorities = queue_priorities;
         |  queues[1].flags = 0;
         |  device_info.queueCreateInfoCount = 2;
         |}
         |
         |vkCreateDevice( $renderer->gpu->device_value, &device_info, NULL, &$this->device_value );
         |

      native
        @|
         |vkGetDeviceQueue( $this->device_value, $renderer->graphics_queue_family.index, 0, &$this->graphics_queue );
         |if ($renderer->uses_separate_presentation_queue)
         |{
         |  vkGetDeviceQueue( $this->device_value, $renderer->presentation_queue_family.index, 0, &$this->presentation_queue );
         |}
         |else
         |{
         |  $this->presentation_queue = $this->graphics_queue;
         |}

    method procedure_address( name:String )->RogueVoidPointer
      local renderer = VulkanRenderer
      local result : RogueVoidPointer
      native @|$result.value = $renderer->vkGetDeviceProcAddr( $this->device_value, $name->data->as_utf8 );
      return result
endClass
